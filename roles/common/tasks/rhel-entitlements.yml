---
# Register a RHEL-based system with subscription-manager.

- name: Set entitlements_path
  set_fact:
    entitlements_path: "{{ secrets_path }}/entitlements.yml"

- name: Include Red Hat encrypted variables.
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ entitlements_path }}"
    - empty.yml
  no_log: true
  tags:
    - vars

- name: Set have_entitlements
  set_fact:
    have_entitlements: "{{ subscription_manager_org != '' and subscription_manager_activationkey != ''}}"

- name: Find existing CA Cert RPMs
  command: rpm -qa katello-ca-consumer*
  register: existing_satellite_cert
  when: use_satellite == true

- name: Uninstall previous CA Certs from Satellite Servers
  command: rpm -e "{{ existing_satellite_cert.stdout }}"
  when:
    - use_satellite == true
    - existing_satellite_cert.stdout|length>0

- name: Subscription-manager clean
  command: subscription-manager clean
  when: use_satellite == true

- name: Install CA Cert from Satellite Server
  yum:
    name: "{{ satellite_cert_rpm }}"
    state: present
    validate_certs: no
    disable_gpg_check: yes
  when: use_satellite == true

# set the releasever cause without it rhel-7-server-rpms repo fails on rhel7.9 machines
# https://tracker.ceph.com/issues/49771
# We have to do this here (instead of in testnodes role) because some package transactions fail during the common role.
# However, we do not want to lock the release ver on all our systems; just testnodes.
- name: Set the releasever
  copy:
    content: "{{ ansible_distribution_version }}"
    dest: /etc/yum/vars/releasever
  when: inventory_hostname in groups['testnodes']

- name: Determine if node is registered with subscription-manager.
  command: subscription-manager identity
  register: subscription
  ignore_errors: true
  changed_when: false
  no_log: true

- name: Set rhsm_registered if we're already registered
  set_fact:
    rhsm_registered: "{{ subscription.rc == 0 }}"

# A `dnf group upgrade base` which happens later in the testnodes role will
# update a 8.X system to 8.Y.  We don't want that to happen because we
# expect to test on a specific version.  set_rhsm_release=true locks a 8.X install to 8.X packages.
- name: Register with subscription-manager.
  command: subscription-manager register
           --activationkey={{ subscription_manager_activationkey }}
           --org={{ subscription_manager_org }}
           --name={{ ansible_fqdn }}
           {% if set_rhsm_release|default(false)|bool == true %}--release={{ ansible_distribution_version }}{% endif %}
           --force
  when: rhsm_registered == false and have_entitlements == true
  register: entitled
  until: entitled is success
  retries: 12
  delay: 10
  failed_when:
    - entitled.rc != 0

- name: Set rhsm_registered if we just registered
  set_fact:
    rhsm_registered: true
  when: entitled is success

# Output of this command is, for example:
# 7.1
# 7.2
# 7Server
- name: List CDN releases available to system
  shell: "subscription-manager release --list | grep -E '[0-9]'"
  register: rhsm_release_list
  changed_when: false
  failed_when:
    - rhsm_release_list.rc != 0

- name: Get list of enabled RHSM repos
  shell: subscription-manager repos --list | grep -B4 'Enabled:.*1' | grep 'Repo ID:' | sed -e 's/Repo ID:\s*\(.*\)/\1/' | sort
  register: repo_list_cmd
  when: rhsm_registered == true
  changed_when: false

- name: Store list of enabled repos
  set_fact:
    repo_list: "{{ repo_list_cmd.stdout.split('\n') }}"
  when: repo_list_cmd is defined and repo_list_cmd is not skipped

- name: Set replace_repos false if entitlements are missing
  set_fact:
    replace_repos: false
  when: have_entitlements == false

- name: Set replace_repos true if rhsm_repos differs from repo_list
  set_fact:
    replace_repos: "{{ repo_list|sort != rhsm_repos|sort }}"
  when: repo_list is defined

- name: Set replace_repos true if newly-subscribed
  set_fact:
    replace_repos: true
  when: rhsm_registered == true and
        (entitled is changed and entitled.rc == 0)

- name: Disable all rhsm repos
  command: subscription-manager repos --disable '*'
  when: rhsm_registered == true and
        replace_repos|bool == true
  # This produces an absurd amount of useless output
  no_log: true

- name: Enable necessary rhsm repos
  command: subscription-manager repos {% for repo in rhsm_repos|list %}--enable={{ repo }} {% endfor %}
  when: rhsm_registered == true and
        replace_repos|bool == true
  retries: 5
  delay: 10

- name: Remove old apt-mirror repository definition.
  file:
    path: /etc/yum.repos.d/cd.repo
    state: absent
  when: entitled is success
