---
- name: Configures MAAS DNS
  when: inventory_hostname in groups['maas_region_rack_server']
  tags: config_dns
  block:
    - name: Get existing DNS resources
      ansible.builtin.command: "maas {{ maas_admin_username }} dnsresources read"
      register: existing_resources
      changed_when: false
    
    - name: Initialize DNS records list
      ansible.builtin.set_fact:
        dns_records: []
    
    - name: Define target hosts for DNS records
      ansible.builtin.set_fact:
        target_hosts: "{{ groups | dict2items | rejectattr('key', 'equalto', 'maas') | map(attribute='value') | flatten | unique | default([]) }}"
        when: groups.keys() | length > 1
    
    - name: Build DNS records for all interfaces
      ansible.builtin.set_fact:
        dns_records: "{{ dns_records + [{'name': item[0].split('.')[0], 'ip': interface_ip, 'type': 'A', 'domain': item[1].value}] }}"
      loop: "{{ (target_hosts | default([])) | product(maas_dns_domains | dict2items) | list }}"
      vars:
        interface_ip: "{{ hostvars[item[0]][item[1].key] if item[1].key != 'ceph' else hostvars[item[0]]['ip'] }}"
      when:
        - target_hosts is defined and target_hosts | length > 0
        - "item[1].key in hostvars[item[0]] or (item[1].key == 'ceph' and 'ip' in hostvars[item[0]])"
    
    - name: Parse desired FQDNs
      ansible.builtin.set_fact:
        desired_fqdns: "{{ dns_records | map(attribute='name') | zip(dns_records | map(attribute='domain')) | map('join', '.') | list }}"
      when: dns_records | length > 0
    
    - name: Remove unwanted DNS records
      ansible.builtin.command: "maas {{ maas_admin_username }} dnsresource delete {{ item.id }}"
      loop: "{{ existing_resources.stdout | from_json }}"
      when: >
        dns_records | length > 0 and
        item.fqdn not in desired_fqdns
      register: dns_deletion
      failed_when: dns_deletion.rc != 0 and "does not exist" not in dns_deletion.stderr
    
    - name: Get updated DNS resources after deletions
      ansible.builtin.command: "maas {{ maas_admin_username }} dnsresources read"
      register: updated_resources
      changed_when: false
    
    - name: Get existing DNS domains
      ansible.builtin.command: "maas {{ maas_admin_username }} domains read"
      register: existing_domains
      changed_when: false
    
    - name: Parse existing domains
      ansible.builtin.set_fact:
        current_domains: "{{ existing_domains.stdout | from_json | map(attribute='name') | list }}"
    
    - name: Remove unwanted domains
      ansible.builtin.command: "maas {{ maas_admin_username }} domain delete {{ item.id }}"
      loop: "{{ existing_domains.stdout | from_json }}"
      when: >
        item.name not in default_domains and
        item.name not in maas_dns_domains.values()
      register: domain_deletion
      failed_when: domain_deletion.rc != 0 and "does not exist" not in domain_deletion.stderr and "protected foreign keys" not in domain_deletion.stderr
    
    - name: Ensure new DNS domains exist
      ansible.builtin.command: "maas {{ maas_admin_username }} domains create name={{ item.value }}"
      loop: "{{ maas_dns_domains | dict2items }}"
      when: item.value not in current_domains
      register: domain_creation
      failed_when: domain_creation.rc != 0 and "already exists" not in domain_creation.stderr
    
    - name: Ensure DNS records exist
      ansible.builtin.command: >
        maas {{ maas_admin_username }} dnsresources create
        fqdn={{ item.name }}.{{ item.domain }}
        ip_addresses={{ item.ip }}
      loop: "{{ dns_records }}"
      when: >
        dns_records | length > 0 and
        (item.name + '.' + item.domain) not in
        (updated_resources.stdout | from_json | map(attribute='fqdn') | list)
      register: dns_creation
      failed_when: dns_creation.rc != 0 and "already exists" not in dns_creation.stderr
