---
# loading vars
- import_tasks: vars.yml
  tags:
    - vars
    - always

- import_tasks: user.yml
  tags:
    - user

- name: Set a high max open files limit for the teuthology user.
  template:
    src: security_limits.conf
    dest: "/etc/security/limits.d/{{ teuthology_user }}.conf"
    owner: root
    group: root
    mode: 0755
  when: ansible_pkg_mgr != "zypper"

- name: Set the hostname
  import_tasks: set_hostname.yml
  when: lab_domain != ""
  tags:
    - hostname

- name: configure ssh
  import_tasks: ssh.yml
  tags:
    - ssh

- name: configure things specific to yum systems
  import_tasks: yum_systems.yml
  when: ansible_os_family == "RedHat"

- name: configure things specific to apt systems
  import_tasks: apt_systems.yml
  when: ansible_pkg_mgr == "apt"

- name: configure things specific to zypper systems
  import_tasks: zypper_systems.yml
  when: ansible_pkg_mgr == "zypper"

- name: configure centos specific things
  import_tasks: setup-centos.yml
  when: ansible_distribution == "CentOS"

- name: configure red hat specific things
  import_tasks: setup-redhat.yml
  when: ansible_distribution == 'RedHat'

- name: configure fedora specific things
  import_tasks: setup-fedora.yml
  when: ansible_distribution == "Fedora"

- name: configure ubuntu specific things
  import_tasks: setup-ubuntu.yml
  when: ansible_distribution == "Ubuntu"

- name: configure ubuntu non-aarch64 specific things
  import_tasks: setup-ubuntu-non-aarch64.yml
  when:
    ansible_distribution == "Ubuntu" and
    ansible_architecture != "aarch64" and
    not containerized_node

- name: configure debian specific things
  import_tasks: setup-debian.yml
  when: ansible_distribution == "Debian"

- name: configure opensuse specific things
  import_tasks: setup-opensuse.yml
  when: ansible_distribution == "openSUSE"

- import_tasks: check-for-nvme.yml
  when: check_for_nvme == true

- import_tasks: zap_disks.yml
  tags:
    - zap

- name: partition drives, if any are requested
  import_tasks: drive_partitioning.yml
  when: drives_to_partition is defined
  tags:
    - partition

- name: set up LVM
  import_tasks: lvm.yml
  tags:
    - lvm

- name: set up filesystems
  import_tasks: filesystems.yml
  tags:
    - filesystems
  when: filesystems is defined

- name: mount /var/lib/ceph to specified partition
  import_tasks: var_lib.yml
  when: var_lib_partition is defined
  tags:
    - varlib

- import_tasks: cachefilesd.yaml
  when: configure_cachefilesd|bool == true
  tags:
    - cachefilesd

# Install and configure cpan and Amazon::S3
- import_tasks: cpan.yml
  tags:
    - cpan
  when:
    - ansible_os_family != "RedHat"
    - ansible_distribution_major_version != 8

# configure ntp
- import_tasks: ntp.yml
  tags:
    - ntp-client

- name: configure pip to use our mirror
  import_tasks: pip.yml
  tags:
    - pip

- name: include resolv.conf setup
  import_tasks: resolvconf.yml
  tags:
    - resolvconf

- name: include secondary NIC config tasks
  import_tasks: secondary_nic.yml
  when: secondary_nic_mac is defined
  tags:
    - secondary-nic

# http://tracker.ceph.com/issues/20623
- name: List any leftover Ceph artifacts from previous jobs
  shell: 'find {{ item }} -name "*ceph*"'
  with_items:
    - /var/run/
    - /etc/systemd/system/
    - /etc/ceph
    - /var/log/
  register: ceph_test_artifacts
  changed_when: ceph_test_artifacts.stdout != ""
  failed_when: ceph_test_artifacts.rc != 0 and
               "No such file or directory" not in ceph_test_artifacts.stderr and
               "File system loop detected" not in ceph_test_artifacts.stderr

- name: Delete any leftover Ceph artifacts from previous jobs
  file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ ceph_test_artifacts.results|map(attribute='stdout_lines')|list }}"

# Touch a file to indicate we are done. This is something chef did;
# teuthology.task.internal.vm_setup() expects it.
- name: Touch /ceph-qa-ready
  file:
      path: /ceph-qa-ready
      state: touch
  when: (ran_from_cephlab_playbook is undefined or not ran_from_cephlab_playbook|bool)
